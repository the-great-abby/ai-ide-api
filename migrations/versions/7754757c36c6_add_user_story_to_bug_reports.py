"""add user_story to bug_reports

Revision ID: 7754757c36c6
Revises: 65fd6b0ba50d
Create Date: 2025-05-17 14:26:14.044720

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision: str = '7754757c36c6'
down_revision: Union[str, None] = '65fd6b0ba50d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    bind = op.get_bind()
    inspector = inspect(bind)
    # Create memory_edges table if it doesn't exist
    if 'memory_edges' not in inspector.get_table_names():
        op.create_table('memory_edges',
            sa.Column('id', sa.String(), nullable=False),
            sa.Column('from_id', sa.String(), nullable=True),
            sa.Column('to_id', sa.String(), nullable=True),
            sa.Column('relation_type', sa.String(), nullable=True),
            sa.Column('meta', sa.Text(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_memory_edges_from_id'), 'memory_edges', ['from_id'], unique=False)
        op.create_index(op.f('ix_memory_edges_relation_type'), 'memory_edges', ['relation_type'], unique=False)
        op.create_index(op.f('ix_memory_edges_to_id'), 'memory_edges', ['to_id'], unique=False)
    # Create memory_vectors table if it doesn't exist
    if 'memory_vectors' not in inspector.get_table_names():
        op.create_table('memory_vectors',
            sa.Column('id', sa.String(), nullable=False),
            sa.Column('namespace', sa.String(), nullable=True),
            sa.Column('reference_id', sa.String(), nullable=True),
            sa.Column('content', sa.Text(), nullable=False),
            sa.Column('embedding', sa.Text(), nullable=True),
            sa.Column('meta', sa.Text(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_memory_vectors_namespace'), 'memory_vectors', ['namespace'], unique=False)
        op.create_index(op.f('ix_memory_vectors_reference_id'), 'memory_vectors', ['reference_id'], unique=False)
    # Check if the 'user_story' column exists in 'bug_reports' before adding it
    if 'bug_reports' in inspector.get_table_names():
        columns = [col['name'] for col in inspector.get_columns('bug_reports')]
        if 'user_story' not in columns:
            op.add_column('bug_reports', sa.Column('user_story', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('bug_reports', 'user_story')
    op.drop_index(op.f('ix_memory_vectors_reference_id'), table_name='memory_vectors')
    op.drop_index(op.f('ix_memory_vectors_namespace'), table_name='memory_vectors')
    op.drop_table('memory_vectors')
    op.drop_index(op.f('ix_memory_edges_to_id'), table_name='memory_edges')
    op.drop_index(op.f('ix_memory_edges_relation_type'), table_name='memory_edges')
    op.drop_index(op.f('ix_memory_edges_from_id'), table_name='memory_edges')
    op.drop_table('memory_edges')
    # ### end Alembic commands ###
