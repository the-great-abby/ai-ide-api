"""add api_access_tokens and api_error_logs tables

Revision ID: 65fd6b0ba50d
Revises: c4a7f0b45182
Create Date: 2025-05-17 13:01:17.965251

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision: str = '65fd6b0ba50d'
down_revision: Union[str, None] = 'c4a7f0b45182'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    bind = op.get_bind()
    inspector = inspect(bind)
    # Create api_access_tokens table if it doesn't exist
    if 'api_access_tokens' not in inspector.get_table_names():
        op.create_table('api_access_tokens',
            sa.Column('id', sa.String(), nullable=False),
            sa.Column('token', sa.String(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('created_by', sa.String(), nullable=True),
            sa.Column('description', sa.String(), nullable=True),
            sa.Column('active', sa.Integer(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_api_access_tokens_token'), 'api_access_tokens', ['token'], unique=True)
    # Create api_error_logs table if it doesn't exist
    if 'api_error_logs' not in inspector.get_table_names():
        op.create_table('api_error_logs',
            sa.Column('id', sa.String(), nullable=False),
            sa.Column('timestamp', sa.DateTime(), nullable=True),
            sa.Column('path', sa.String(), nullable=True),
            sa.Column('method', sa.String(), nullable=True),
            sa.Column('status_code', sa.Integer(), nullable=True),
            sa.Column('message', sa.Text(), nullable=True),
            sa.Column('stack_trace', sa.Text(), nullable=True),
            sa.Column('user_id', sa.String(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
    # --- Commented out: memory_edges and memory_vectors require custom types ---
    # op.create_table('memory_edges', ...)
    # op.create_table('memory_vectors', ...)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index(op.f('ix_memory_vectors_reference_id'), table_name='memory_vectors')
    # op.drop_index(op.f('ix_memory_vectors_namespace'), table_name='memory_vectors')
    # op.drop_table('memory_vectors')
    # op.drop_index(op.f('ix_memory_edges_to_id'), table_name='memory_edges')
    # op.drop_index(op.f('ix_memory_edges_relation_type'), table_name='memory_edges')
    # op.drop_index(op.f('ix_memory_edges_from_id'), table_name='memory_edges')
    # op.drop_table('memory_edges')
    op.drop_table('api_error_logs')
    op.drop_index(op.f('ix_api_access_tokens_token'), table_name='api_access_tokens')
    op.drop_table('api_access_tokens')
    # ### end Alembic commands ###
