"""Add version column to rules table

Revision ID: df6cfdab0f0e
Revises: edeeb4090649
Create Date: 2025-05-12 18:47:57.229571

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'df6cfdab0f0e'
down_revision: Union[str, None] = 'edeeb4090649'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    # Proposals table columns
    proposal_cols = [col['name'] for col in inspector.get_columns('proposals')]
    if 'rule_id' not in proposal_cols:
        op.add_column('proposals', sa.Column('rule_id', sa.String(), nullable=True))
    if 'version' not in proposal_cols:
        op.add_column('proposals', sa.Column('version', sa.Integer(), nullable=True))
    if 'categories' not in proposal_cols:
        op.add_column('proposals', sa.Column('categories', sa.String(), nullable=True))
    if 'tags' not in proposal_cols:
        op.add_column('proposals', sa.Column('tags', sa.String(), nullable=True))
    # Status type change (skip if already Enum)
    try:
        op.alter_column('proposals', 'status',
            existing_type=sa.VARCHAR(length=8),
            type_=sa.Enum('pending', 'approved', 'rejected', 'reverted_to_enhancement', name='statusenum'),
            existing_nullable=True)
    except Exception:
        pass
    try:
        op.alter_column('rule_versions', 'status',
            existing_type=sa.VARCHAR(length=8),
            type_=sa.Enum('pending', 'approved', 'rejected', 'reverted_to_enhancement', name='statusenum'),
            existing_nullable=True)
    except Exception:
        pass
    # Rules table columns
    rules_cols = [col['name'] for col in inspector.get_columns('rules')]
    if 'version' not in rules_cols:
        op.add_column('rules', sa.Column('version', sa.Integer(), nullable=True))
    if 'categories' not in rules_cols:
        op.add_column('rules', sa.Column('categories', sa.String(), nullable=True))
    if 'tags' not in rules_cols:
        op.add_column('rules', sa.Column('tags', sa.String(), nullable=True))
    try:
        op.alter_column('rules', 'status',
            existing_type=sa.VARCHAR(length=8),
            type_=sa.Enum('pending', 'approved', 'rejected', 'reverted_to_enhancement', name='statusenum'),
            existing_nullable=True)
    except Exception:
        pass
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('rules', 'status',
               existing_type=sa.Enum('pending', 'approved', 'rejected', 'reverted_to_enhancement', name='statusenum'),
               type_=sa.VARCHAR(length=8),
               existing_nullable=True)
    op.drop_column('rules', 'tags')
    op.drop_column('rules', 'categories')
    op.drop_column('rules', 'version')
    op.alter_column('rule_versions', 'status',
               existing_type=sa.Enum('pending', 'approved', 'rejected', 'reverted_to_enhancement', name='statusenum'),
               type_=sa.VARCHAR(length=8),
               existing_nullable=True)
    op.alter_column('proposals', 'status',
               existing_type=sa.Enum('pending', 'approved', 'rejected', 'reverted_to_enhancement', name='statusenum'),
               type_=sa.VARCHAR(length=8),
               existing_nullable=True)
    op.drop_column('proposals', 'tags')
    op.drop_column('proposals', 'categories')
    op.drop_column('proposals', 'version')
    op.drop_column('proposals', 'rule_id')
    # ### end Alembic commands ###
