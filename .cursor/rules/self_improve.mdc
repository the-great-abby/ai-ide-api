---
description: 
globs: 
alwaysApply: true
---
{section}
----------------
(Add content for this section.)


{section}
----------------
(Add content for this section.)


{section}
----------------
(Add content for this section.)


{section}
----------------
(Add content for this section.)


- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding to [prisma.mdc](mdc:.cursor/rules/prisma.mdc):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.

# Rule: User Story Creation for New Workflows and Features

## Motivation
To ensure documentation and onboarding stay in sync with system capabilities, every new workflow, automation, or major feature (such as a Makefile target, script, or API endpoint) must have a corresponding user story in `docs/user_stories/`.

## Enforcement
- When adding a new Makefile target, script, or API endpoint, create or update a user story.
- The user story should describe:
  - Motivation
  - Actors
  - Preconditions
  - Step-by-step actions
  - Expected outcomes
  - Best practices (if relevant)
- Place the user story in `docs/user_stories/` with a descriptive filename.
- Reference the user story in code reviews and onboarding docs as needed.

## Example
If you add a new Makefile target for batch rule suggestion:
- Create `docs/user_stories/batch_rule_suggestion.md` describing how and why to use it.

## Rationale
This practice ensures that:
- New features are discoverable and usable by all team members.
- Onboarding and documentation remain up to date.
- The system is easier to maintain and extend.